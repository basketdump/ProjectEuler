'''
Problem 2 of Project Euler
--------------------------
Each new term in the Fibonacci sequence
is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence
whose values do not exceed four million, find the
sum of the even-valued terms.
'''


def generate_fibonacci_sequence(max_value):
    '''generates a list of fibonacci numbers that do not
    exceed max_value'''
    if max_value == 1:
        return [1]
    elif max_value == 2:
        return [1, 2]

    fibonacci_numbers = [1, 2]
    flag = True
    while flag:
        next_number = fibonacci_numbers[len(fibonacci_numbers) - 1] \
        + fibonacci_numbers[len(fibonacci_numbers) - 2]
        if next_number <= max_value:
            fibonacci_numbers.append(next_number)
        else:
            flag = False
    return fibonacci_numbers

def sum_even_values(numbers):
    '''returns the sum of even values within a list of numbers'''
    even_sum = 0
    for number in numbers:
        if number % 2 == 0:
            even_sum += number

    return even_sum


def main():
    '''defines max_value, defines fibonacci_numbers as a list of all fibonacci values
    greater than or equal to max_value, and sums all even values
    within fibonacci_values and prints the answer (sum of even values)'''
    max_value = int(4e6) # 4 million
    fibonacci_numbers = generate_fibonacci_sequence(max_value)
    answer = sum_even_values(fibonacci_numbers)

    print(answer)


main()
